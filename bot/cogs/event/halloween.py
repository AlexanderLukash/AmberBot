import asyncio
from PIL import Image
from easy_pil import load_image_async, Editor
from nextcord.ext.commands import Cog
import nextcord
from nextcord.ext.commands import Bot
import json
import cloudinary
import random
from cloudinary import uploader

cloudinary.config(
    cloud_name="dndstfjbu",
    api_key="399658246291491",
    api_secret="lSMOzkIj3JUOnNpZ0rvHz9pIDC4"
)

halloween_emoji = ["üëª", "üéÉ", "ü¶á", "üï∑Ô∏è", "ü™¶", "üíÄ", "üåô", "üï∏Ô∏è"]

halloween_quotes = [
    "–ó–∞—á–∏–Ω–∏ –¥–≤–µ—Ä—ñ, –∑–∞–ø–∞–ª–∏ —Å–≤—ñ—á–∫—É, —ñ —á–µ—Ä–µ–∑ –≤—ñ–∫–Ω–æ –≤–µ–¥–º–µ–¥–∏—Ü—é –Ω–µ –≤–ø—É—Å–∫–∞–π.",
    "–£ —Ü—é –Ω—ñ—á –Ω–∞–≤—ñ—Ç—å –≥–∞—Ä–±—É–∑–∏ –º–æ–∂—É—Ç—å —Å—Ç–∞—Ç–∏ —á–∞—Ä—ñ–≤–Ω–∏–º–∏ –∫–∞—Ä–µ—Ç–∞–º–∏.",
    "–Ø–∫ —ñ –±—É–¥—å-—è–∫–µ –∑–∞–∫–ª—è—Ç—Ç—è, –•–µ–ª–ª–æ—É—ó–Ω –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '–í–∞—É!'",
    "–ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∫–∞–ª–æ—Ä—ñ—ó —Ç–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ - –•–µ–ª–ª–æ—É—ó–Ω - —Ü–µ —á–∞—Å –∂–∞—Ö–ª–∏–≤–æ —Å–º–∞—á–Ω–∏—Ö –ª–∞—Å–æ—â—ñ–≤.",
    "–ù–∞–≤—ñ—Ç—å –ø—Ä–∏–≤–∏–¥–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ —ñ –ø–æ–≥—É–ª—è—Ç–∏. –û—Å–æ–±–ª–∏–≤–æ –Ω–∞ –•–µ–ª–ª–æ—É—ó–Ω.",
    "–£ —Ü—é –Ω—ñ—á –Ω–∞–≤—ñ—Ç—å –º—ñ—Å—è—Ü—å –ø–æ—Å–º—ñ—Ö–∞—î—Ç—å—Å—è –∑–ª–æ–≤—ñ—Å–Ω–æ.",
    "–ù–µ –±—ñ–π—Ç–µ—Å—è —Ç–µ–º—Ä—è–≤–∏ - —Ü–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞, –∞–ª–µ —ñ–Ω–æ–¥—ñ —Ç–∞–º –º–æ–∂—É—Ç—å —Ö–æ–≤–∞—Ç–∏—Å—è —Å–º—ñ—à–Ω—ñ –∂–∞—Ö–∏",
    "–•–µ–ª–ª–æ—É—ó–Ω - —Ü–µ —î–¥–∏–Ω–∏–π —á–∞—Å —É —Ä–æ—Ü—ñ, –∫–æ–ª–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–æ—Å–∏—Ç–∏ —Å–≤–æ—ó —Å—Ç—Ä–∞—Ö–∏ —è–∫ –∫–æ—Å—Ç—é–º–∏.",
    "–ù–∞ –•–µ–ª–ª–æ—É—ó–Ω –Ω—ñ—á –∑–µ–º–ª—è —Å—Ç–∞—î –∂–∏–≤–æ—é, –∞ –º–µ—Ä—Ç–≤—ñ —Ä–µ—á—ñ –æ–∂–∏–≤–∞—é—Ç—å.",
    "–ù–µ—Ö–∞–π –∫–æ–∂–µ–Ω —É–ª–æ–≤–∏—Ç—å —Å–≤–æ—é –∑—ñ—Ä–∫—É –∑ –Ω–µ–±–∞, –∞ –•–µ–ª–ª–æ—É—ó–Ω –Ω–µ—Ö–∞–π –ø—Ä–∏–Ω–µ—Å–µ —Å–≤–æ—ó –º—Ä—ñ—ó.",
    "–ó–Ω–∞–π–¥—ñ—Ç—å —Å–≤–æ—ó–º –¥—É—à–∞–º —Å–≤—ñ—Ç–ª–æ —Å–µ—Ä–µ–¥ —Ü—ñ—î—ó –Ω–æ—á—ñ.",
    "–ù—ñ—á –•–µ–ª–ª–æ—É—ó–Ω—É - —Ü–µ –Ω—ñ—á, –∫–æ–ª–∏ –º—Ä—ñ—ó —Å—Ç–∞—é—Ç—å –∫–æ—à–º–∞—Ä–∞–º–∏ —ñ –∫–æ—à–º–∞—Ä–∏ —Å—Ç–∞—é—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—ñ—Å—Ç—é.",
    "–£ —Ü—é –Ω—ñ—á –≤—ñ—Ç–µ—Ä —à–µ–ø–æ—á–µ —Å–µ–∫—Ä–µ—Ç–∏, –∞ —Ç—å–º–∞ –ø—Ä–∏—Ö–æ–≤—É—î –Ω–∞–π–±—ñ–ª—å—à—ñ —á–∞—Ä–∏.",
    "–ù—ñ—á –•–µ–ª–ª–æ—É—ó–Ω—É - —Ü–µ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –≤—Å—ñ —Å—Ç–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —á–∞—Ä—ñ–≤–Ω–∏–º–∏.",
    "–°–º–µ—Ä—Ç—å –Ω–µ –∫—ñ–Ω–µ—Ü—å —ñ—Å—Ç–æ—Ä—ñ—ó, –∞ –ª–∏—à–µ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.",
    "–í—ñ–¥—å–º–∏ –º–∞—é—Ç—å —Å–≤–æ—ó —Å–µ–∫—Ä–µ—Ç–∏, –∞–ª–µ –•–µ–ª–ª–æ—É—ó–Ω - —Ü–µ —á–∞—Å –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–∏–º–∏.",
    "–ù–∞ –•–µ–ª–ª–æ—É—ó–Ω –Ω—ñ—á –Ω–µ–±–æ –±—ñ–ª—å—à —è—Å–Ω–µ, –∞ –∑—ñ—Ä–∫–∏ –±–ª–∏–∂—á–µ.",
    "–¢–∞—î–º–Ω–∏—Ü—è –•–µ–ª–ª–æ—É—ó–Ω—É –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –≤—Å–µ –º–æ–∂–ª–∏–≤–æ.",
    "–ù–∞ –•–µ–ª–ª–æ—É—ó–Ω –Ω—ñ—á —Å—Ç–∞—î –¥–Ω–µ–º –¥–ª—è –≤—Å—ñ—Ö —Ç–∏—Ö, —Ö—Ç–æ –≤—ñ—Ä–∏—Ç—å —É –¥–∏–≤–∞.",
    "–•–µ–ª–ª–æ—É—ó–Ω - —Ü–µ —á–∞—Å, –∫–æ–ª–∏ –¥—É—à—ñ –º–µ—Ä—Ç–≤–∏—Ö –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è, —â–æ–± –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—è –∑ –∂–∏–≤–∏–º–∏."
]

candy_count_list = [3, 1, 5, 7, 2, 1, 4, 6, 2, 8, 1, 1, 2, 3]

class AnswerButtons(nextcord.ui.View):


    def __init__(self, correct_answer):
        super().__init__(timeout=7200)
        self.value = None
        self.correct_answer = correct_answer

    @nextcord.ui.button(label="1", style=nextcord.ButtonStyle.gray)
    async def first_ansver(self, buttun: nextcord.ui.Button, interaction: nextcord.Interaction):
        if self.correct_answer == 0:
            self.value = True

            file_name = "halloween_users.json"

            try:
                # Load current data from the file (if available)
                with open(file_name, 'r') as file:
                    data = json.load(file)

            except FileNotFoundError:
                # If no file is found, create an empty dictionary
                data = {}
            if str(interaction.user.id) in data:
                candy = data[str(interaction.user.id)][1]['candy']
                candy_added = random.choice(candy_count_list)
                new_candy = candy + candy_added
                data[str(interaction.user.id)][1]['candy'] = new_candy

                with open(file_name, 'w') as file:
                    json.dump(data, file, indent=4)

            await interaction.send(f"True; You give: {candy_added} Candy: {data[str(interaction.user.id)][1]['candy']}", ephemeral=True)
        else:
            self.value = False
            await interaction.send('False', ephemeral=True)

    @nextcord.ui.button(label="2", style=nextcord.ButtonStyle.gray)
    async def second_ansver(self, buttun: nextcord.ui.Button, interaction: nextcord.Interaction):
        if self.correct_answer == 1:
            self.value = True

            file_name = "halloween_users.json"

            try:
                # Load current data from the file (if available)
                with open(file_name, 'r') as file:
                    data = json.load(file)

            except FileNotFoundError:
                # If no file is found, create an empty dictionary
                data = {}
            if str(interaction.user.id) in data:
                candy = data[str(interaction.user.id)][1]['candy']
                candy_added = random.choice(candy_count_list)
                new_candy = candy + candy_added
                data[str(interaction.user.id)][1]['candy'] = new_candy

                with open(file_name, 'w') as file:
                    json.dump(data, file, indent=4)

            await interaction.send(f"True; Candy: {data[str(interaction.user.id)][1]['candy']}", ephemeral=True)
        else:
            self.value = False
            await interaction.send('False', ephemeral=True)

    @nextcord.ui.button(label="3", style=nextcord.ButtonStyle.gray)
    async def third_ansver(self, buttun: nextcord.ui.Button, interaction: nextcord.Interaction):
        if self.correct_answer == 2:
            self.value = True

            file_name = "halloween_users.json"

            try:
                # Load current data from the file (if available)
                with open(file_name, 'r') as file:
                    data = json.load(file)

            except FileNotFoundError:
                # If no file is found, create an empty dictionary
                data = {}
            if str(interaction.user.id) in data:
                candy = data[str(interaction.user.id)][1]['candy']
                candy_added = random.choice(candy_count_list)
                new_candy = candy + candy_added
                data[str(interaction.user.id)][1]['candy'] = new_candy

                with open(file_name, 'w') as file:
                    json.dump(data, file, indent=4)

            await interaction.send(f"True; Candy: {data[str(interaction.user.id)][1]['candy']}", ephemeral=True)
        else:
            self.value = False
            await interaction.send('False', ephemeral=True)

    @nextcord.ui.button(label="4", style=nextcord.ButtonStyle.gray)
    async def fourth_ansver(self, buttun: nextcord.ui.Button, interaction: nextcord.Interaction):
        if self.correct_answer == 3:
            self.value = True

            file_name = "halloween_users.json"

            try:
                # Load current data from the file (if available)
                with open(file_name, 'r') as file:
                    data = json.load(file)

            except FileNotFoundError:
                # If no file is found, create an empty dictionary
                data = {}
            if str(interaction.user.id) in data:
                candy = data[str(interaction.user.id)][1]['candy']
                candy_added = random.choice(candy_count_list)
                new_candy = candy + candy_added
                data[str(interaction.user.id)][1]['candy'] = new_candy

                with open(file_name, 'w') as file:
                    json.dump(data, file, indent=4)

            await interaction.send(f"True; Candy: {data[str(interaction.user.id)][1]['candy']}", ephemeral=True)

        else:
            self.value = False
            await interaction.send('False', ephemeral=True)

class __HalloWeenCog(Cog):

    def __init__(self, bot: Bot):
        self.bot = bot

    @nextcord.slash_command(name=f'halloween', description=f'üéÉ –¶—É–∫–µ—Ä–∫–∏ –∞–±–æ —Å–º–µ—Ä—Ç—å! üëª')
    async def halloween(self, interaction: nextcord.Interaction):
        file_name = "halloween_users.json"

        try:
            # Load current data from the file (if available)
            with open(file_name, 'r') as file:
                data = json.load(file)

        except FileNotFoundError:
            # If no file is found, create an empty dictionary
            data = {}

        back = Image.new('RGBA', ((512, 472)))
        back = Editor(back)
        background = Editor(f"Group 651.png").resize((512, 281))
        profile = await load_image_async(str(interaction.user.avatar.url))
        profile = Editor(profile).resize((343, 343)).rounded_corners(radius=25)
        background_1 = Editor(f"Group 652.png").resize((512, 147))
        back.paste(background.image, (0, 0))
        back.paste(profile.image, (70, 50))
        back.paste(background_1.image, (-10, 310))
        back.save("halloween_avatar.png")
        result = cloudinary.uploader.upload("halloween_avatar.png",
                                            public_id="halloween_avatar")

        if str(interaction.user.id) in data:
            embed = nextcord.Embed(
                title='üéÉ –¶—É–∫–µ—Ä–∫–∏ –∞–±–æ —Å–º–µ—Ä—Ç—å! üéÉ',
                description=f'**{random.choice(halloween_quotes)}**',
                color=nextcord.Color.dark_purple())
            embed.set_thumbnail(
                url=f'https://res.cloudinary.com/dndstfjbu/image/upload/v1696921147/Group_135_qdrmsc.png')
            embed.add_field(name=f"üç¨ –¶—É–∫–µ—Ä–æ–∫: **{data[str(interaction.user.id)][1]['candy']}**", value=f"",
                            inline=False)
            embed.set_image(url=f"{result['url']}")
            embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar.url)
            embed.set_author(name=interaction.user.name, icon_url=interaction.user.avatar.url)
            await interaction.send(embed=embed, ephemeral=True)

        elif str(1047938410347765911) in data:
            pass

        else:
            data[interaction.user.id] = interaction.user.name, {'candy': 0}

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(file_name, 'w') as file:
                json.dump(data, file, indent=4)

            with open(file_name, 'r') as file:
                data = json.load(file)

            embed = nextcord.Embed(
                title='üéÉ –¶—É–∫–µ—Ä–∫–∏ –∞–±–æ —Å–º–µ—Ä—Ç—å! üéÉ',
                description=f'**{random.choice(halloween_quotes)}**',
                color=nextcord.Color.dark_purple())
            embed.add_field(name=f"üç¨ –¶—É–∫–µ—Ä–æ–∫: **{data[str(interaction.user.id)][1]['candy']}**", value=f"",
                            inline=False)
            embed.set_thumbnail(
                url='https://res.cloudinary.com/dndstfjbu/image/upload/v1696921147/Group_135_qdrmsc.png')
            embed.set_image(url=f"{result['url']}")
            embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar.url)
            embed.set_author(name=interaction.user.name, icon_url=interaction.user.avatar.url)
            await interaction.send(embed=embed, ephemeral=True)

    @nextcord.slash_command(name=f'halloween_top', description=f'üéÉ –•—Ç–æ –∑—ñ–±—Ä–∞–≤ –Ω–∞–π–±—ñ–ª—å—à–µ —Å–æ–ª–æ–¥–æ—â—ñ–≤? üëª')
    async def halloween_top(self, interaction: nextcord.Interaction):
        file_name = "halloween_users.json"

        try:
            # Load current data from the file (if available)
            with open(file_name, 'r') as file:
                data = json.load(file)

        except FileNotFoundError:
            # If no file is found, create an empty dictionary
            data = {}

        top_user = sorted(data.items(), key=lambda x: x[1][1]['candy'], reverse=True)
        top_ten = top_user[:10]
        embed = nextcord.Embed(
            title='üéÉ –¢–æ–ø –∑–±–∏—Ä–∞—á—ñ–≤! üéÉ',
            description=f'**–ù–∞–∑–¥–æ–≥–∞–Ω—è–π —ó—Ö —Å–∫–æ—Ä—ñ—à–µ!**',
            color=nextcord.Color.dark_purple())

        for i, (user_id) in enumerate(top_ten, start=1):
            name = user_id[1][0]
            candy = user_id[1][1]["candy"]
            embed.add_field(name=f"{random.choice(halloween_emoji)} **{name}**", value=f"üç¨ –¶—É–∫–µ—Ä–æ–∫: **{candy}**",
                            inline=False)
            embed.add_field(name='', value='')

        embed.set_thumbnail(
            url='https://res.cloudinary.com/dndstfjbu/image/upload/v1696921147/Group_135_qdrmsc.png')
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar.url)
        embed.set_author(name=interaction.user.name, icon_url=interaction.user.avatar.url)
        await interaction.send(embed=embed, ephemeral=True)

    # @nextcord.slash_command(name=f'halloween_quiz', description=f'üéÉ –•—Ç–æ –∑—ñ–±—Ä–∞–≤ –Ω–∞–π–±—ñ–ª—å—à–µ —Å–æ–ª–æ–¥–æ—â—ñ–≤? üëª')
    async def halloween_quiz(self):
        interaction = nextcord.Interaction
        file_name = "halloween_quiz.json"

        try:
            # Load current data from the file (if available)
            with open(file_name, 'r') as file:
                data = json.load(file)

        except FileNotFoundError:
            # If no file is found, create an empty dictionary
            data = {}

        quiz = random.choice(data['quizs'])
        channel = self.bot.get_channel(1161175049798160455)
        embed = nextcord.Embed(
            title=f'üéÉ {quiz["quiz"]} üéÉ',
            description=f'–û–±–µ—Ä–∏ 1 –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!',
            color=nextcord.Color.dark_purple())
        for choice, answer in enumerate(quiz["answers"]):
            embed.add_field(name=f'**{choice + 1}. {answer["answer"]}**', value='', inline=False)
        correct_answer = next((i for i, answer in enumerate(quiz["answers"]) if answer["correct"]), None)
        embed.set_footer(text=self.bot.user.name, icon_url=self.bot.user.avatar.url)
        embed.set_thumbnail(
            url='https://res.cloudinary.com/dndstfjbu/image/upload/v1696921147/Group_135_qdrmsc.png')
        view = AnswerButtons(correct_answer)
        await channel.send(embed=embed, view=view)

    @Cog.listener()
    async def on_ready(self):
        while True:
            await self.halloween_quiz()
            await asyncio.sleep(7200)


def register_halloween_event_cogs(bot: Bot) -> None:
    bot.add_cog(__HalloWeenCog(bot))
